define(["jquery"], function($){
		//private scope
		var idCount=0;

		//public scope object
		var _public={};

		_public.defaultType={name: "Default", color:"black", visible:true};
		

	 	_public.graph={
			name:"Default",
			nodes:[],
			links:[],
			types: [_public.defaultType]
		}

		_public.edit_locked=false;
		_public.getSelected=function(){
			return _public.graph.nodes.filter(n=>n.selected).concat(_public.graph.links.filter(l=>l.selected));		
		}

	 	_public.createNode=function(x,y) {
		    var newnode = {
				x: x,
				y: y,
				id:"id"+(idCount++),
				"label":"New",
				"type":_public.defaultType,
				"attributes":[]
			};
		  _public.graph.nodes.push(newnode);
			return newnode;
		};

		_public.createLink=function(source, target){
				var newLink={
					id:"id"+idCount++,
					source:source,
					target:target,
					"label":"New",
					"type":_public.defaultType
				};
				_public.graph.links.push(newLink);
				newLink.linkSet=_public.linksBetween(newLink.source, newLink.target).map(l => newLink.id);
				newLink.linkSetSize=newLink.linkSet.length;
				newLink.linkIndex=newLink.linkSet.indexOf(newLink.id);
				return newLink;
		};

		_public.import=function(data){
			var graph=JSON.parse(data);
				graph.nodes.forEach(n => {
					n.type=graph.types.filter(t => t.name==n.type)[0];	
				});
				graph.links.forEach(l => {
					l.source=graph.nodes.filter(n => n.id==l.source)[0];
					l.target=graph.nodes.filter(n => n.id==l.target)[0];
					l.type=graph.types.filter(t => t.name==l.type)[0];
				});
			_public.graph=graph;
			_public.graph.links.forEach( l => {
				l.linkSet=_public.linksBetween(l.source, l.target).map(l => l.id);
				l.linkSetSize=l.linkSet.length;
				l.linkIndex=l.linkSet.indexOf(l.id);				
			});
			_public.changed();
		}

		_public.export=function(){
			var tmp_nodes=_public.graph.nodes;
			var tmp_links=_public.graph.links;
			
			_public.graph.nodes=_public.graph.nodes.map(
			n => {
					var new_n=$.extend(true, {},n);
					new_n.type=n.type.name;
					return new_n;
			});
			
			_public.graph.links=_public.graph.links.map(
			l => {
					var new_l=$.extend(true, {},l);
					new_l.source=l.source.id;
					new_l.target=l.target.id;
					new_l.type=l.type.name;
					return new_l;
			});

			var marshalled=JSON.stringify(_public.graph);
			_public.graph.links=tmp_links;
			_public.graph.nodes=tmp_nodes;
			return marshalled;
		}



		_public.linksBetween=function(source, target){
			return _public.graph.links.filter(l => {return ((l.source.id==source.id && l.target.id == target.id)||
				(l.target.id==source.id && l.source.id == target.id))
			});
		}

		_public.linksOf=function(node){
			return _public.graph.links.filter(l => {
				return (l.source.id==node.id || l.target.id == node.id)
			});
		}

		_public.views=[];

		_public.changed=function(){
			_public.views.forEach(v => v.update())
		}

		return _public;
});
