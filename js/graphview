define(["d3", "model"], function(d3, model){


	var circle_radius=13;

	var svg,
	dragLine,
	drag_linking=false,
	link_target=null,
	_public={};


	_public.init=function(){
		svg = d3.select("svg")
		.on("click", function(){
			if(model.edit_locked)return;
			model.graph.links.forEach(l=>l.selected=false);
			model.graph.nodes.forEach(n => n.selected=false);
			var point = d3.mouse(this);
			var newNode=model.createNode(point[0], point[1]);
			newNode.selected=true;
			model.changed();
		});


		svg.append('svg:defs').append('svg:marker')
    .attr('id', 'end-arrow')
    .attr('viewBox', '0 -5 10 10')
    .attr('refX', 6)
    .attr('markerWidth', 3)
    .attr('markerHeight', 3)
    .attr('orient', 'auto')
  .append('svg:path')
    .attr('d', 'M0,-5L10,0L0,5')
    .attr('fill', '#000');
	
		var width = +svg.attr("width"),
			height = +svg.attr("height")

		dragLine = svg.append('line')
		.classed('dragline hidden', true)
		.attr("x1", 0 )
		.attr("y1", 0 )
		.attr("x2", 100)
		.attr("y2", 100)
	}

	_public.update=function(){
		var link_update = svg.selectAll(".link").data(model.graph.links, function(d){return d.id;});
		var link_exit = link_update.exit();

		link_exit
		.remove();

		var link_enter=link_update.enter()
		.insert("g",":first-child")
			.classed("link", true)
			.attr("id", function(d){return d.id;})
			.on("click", function(d){
				d3.event.stopPropagation();
				if(!d3.event.ctrlKey){
					model.graph.links.forEach(l=>l.selected=false);
					model.graph.nodes.forEach(n => n.selected=false);			
				};
				d.selected=!d.selected;
				model.changed();
		});


		link_enter.insert("path").classed("visiblelink", true).style('marker-end', 'url(#end-arrow)');
		link_enter.insert("path", ":first-child").classed("clicksurface", true)
		link_enter.insert("text");

		var link_merged = link_update.merge(link_enter);

		link_merged
		.selectAll("path")
		.attr("d",getLinkLine);

		link_merged
		.selectAll(".visiblelink")
		.classed("selected", function(d){return d.selected})
		.style("stroke", function(d){return d.type.color})
		.style("visibility", function(d){ return d.type.visible?"visible":"collapse"})

		link_merged
		.selectAll(".clicksurface")
		.style("visibility", function(d){ return d.type.visible?"hidden":"collapse"})

		link_merged
		.selectAll("text")
			.attr('x', function(d){return getTextPos(d)[0]})
			.attr('y', function(d){return getTextPos(d)[1]})
			.text(function(d) {
				return d.label;
			})
		.style("visibility", function(d){ return d.type.visible?"visible":"collapse"});


		link_merged
		.style("opacity",function(d){return (d.hidden||d.source.hidden||d.target.hidden)?0.05:1});

		var node_update = svg.selectAll(".node").data(model.graph.nodes, function(d){return d.id;});

		var node_exit = node_update.exit();
		node_exit.remove();

		var node_enter = node_update.enter()
		.append("g")
			.classed("node", true)
			.attr("id", function(d){return d.id;})
		.call(d3.drag()
			.on("start", dragstarted)
			.on("drag", dragged)
			.on("end", dragended))
		.on("click", function(d){
			d3.event.stopPropagation();			
			if(!d3.event.ctrlKey){
				model.graph.links.forEach(l => l.selected=false);
				model.graph.nodes.forEach(n => n.selected=false);			
			};
			d.selected=!d.selected;
			model.changed();
			
		})
		.on("mouseenter", function(d){
			if(drag_linking)link_target=d;
		})
		.on("mouseleave", function(d){
			if(drag_linking)link_target=null;
		});

		node_enter.append("circle")
			.attr("r", circle_radius)

		node_enter.append("text")
		.attr('x', 20)
		.attr('y', 6);

		var node_merged = node_update.merge(node_enter);

		node_merged
			.attr("transform", function(d) {
				return "translate(" + d.x + "," + d.y + ")";
			})
		.selectAll("text")
			.text(function(d) {
				return d.label;
			})
			.style("visibility", function(d){ return d.type.visible?"visible":"collapse"});

		node_merged
			.selectAll("circle")
			.classed("selected",function(d){return d.selected})
			.style("fill", function(d){ return d.type.color})
			.style("visibility", function(d){ return d.type.visible?"visible":"collapse"});

		node_merged.style("opacity",function(d){return d.hidden?0.05:1});

	}


	function dragstarted(d) {
		if(d3.event.sourceEvent.shiftKey){
			if(model.edit_locked)return;
			if(model.getSelected().lenght>1)return;
			drag_linking=true;
			dragLine
			.classed("hidden", false)
			.attr("x1", d.x )
			.attr("y1", d.y )
			.attr("x2", d3.event.x)
			.attr("y2", d3.event.y);
		}
	}

	function dragged(d){
		if(drag_linking){
			if(model.edit_locked)return;
			dragLine
			.attr("x2", d3.event.x)
			.attr("y2", d3.event.y);
		}
		else{
			var toDrag=model.getSelected();
			if(toDrag.lenght==0)toDrag=[d];			
				
			toDrag.forEach(n => {
				n.x += d3.event.dx;
				n.y += d3.event.dy;
			});			
							
			d3.selectAll(".node").filter(d => d.selected==true).attr("transform", function(d) {
				return "translate(" + d.x + "," + d.y + ")";
			})
			.each(function(d){
				var movingLinks=d3.selectAll(".link")
				.filter(function(d1){return (d1.source === d || d1.target === d)});

				movingLinks
				.selectAll("path")
				.attr("d",getLinkLine);

				movingLinks
				.selectAll("text")
				.attr('x', function(d){return getTextPos(d)[0]})
				.attr('y', function(d){return getTextPos(d)[1]})
				.text(function(d) {
						return d.label;
					});
			});	
		}	
	}


	function dragended(d) {
		if(drag_linking){
			if(model.edit_locked)return;
			drag_linking=false;
			dragLine.classed("hidden", true);
			if(link_target){
				var newlink=model.createLink(d, link_target);
				model.graph.links.forEach(l=>l.selected=false);
				model.graph.nodes.forEach(n => n.selected=false);
				newlink.selected=true;
				model.changed();
			}
		}
	}


	function getLinkLine(d){
		//these should be recomputed only when adding/removing links
		d.linkSet=model.linksBetween(d.source, d.target).map(l => l.id);
		d.linkSetSize=d.linkSet.length;
		d.linkIndex=d.linkSet.indexOf(d.id);
		d.newPosSignature=d.source.x+d.source.y+d.target.x+d.target.Y+d.linkIndex;
		if(d.posSignature!=d.newPosSignature){
			computeLayout(d);
			d.posSignature=d.newPosSignature;
		}
		return d.line;
	}

	function getTextPos(d){
		//these should be recomputed only when adding/removing links
		d.linkSet=model.linksBetween(d.source, d.target).map(l => l.id);
		d.linkSetSize=d.linkSet.length;
		d.linkIndex=d.linkSet.indexOf(d.id);
		d.newPosSignature=d.source.x+d.source.y+d.target.x+d.target.y+d.linkIndex;
		if(d.posSignature!=d.newPosSignature){
			computeLayout(d);
			d.posSignature=d.newPosSignature;
		}
		return d.textPos;
	}

	const step=20;
	var line =d3.line().curve(d3.curveCardinal);
	function computeLayout(d){
			if(d.source == d.target){
				var index=1+d.linkIndex;
				var points=	[
					[d.source.x-10,d.source.y+10],
					[d.source.x-20-(5*index),d.source.y+20],
					[d.source.x,d.source.y+30*index],
					[d.source.x+20+(5*index),d.source.y+20],
					[d.source.x+10,d.source.y+10]
				]
			
				d.line=line(points);
				d.textPos=[d.source.x+10,d.source.y+30*index+10];
			}
			else{
				//makes  0, 1, -1, 2, -2, 3, -3...
				var progression=d3.range(1,d.linkSetSize).reduce((p,c) => {
					p.push(c);
					p.push(-c);	
					return p;  
				}, [0])

				//get symmetric positioning in case of an even number of links
				var index=(d.linkSetSize%2==0)?d.linkIndex+1:d.linkIndex;
								
				var t=progression[index]*step;
				var middlepoint=parametricBisector(d.source.x, d.source.y, d.target.x, d.target.y)(t);
				var points=	[
					getStart(d.source.x, d.source.y, d.target.x, d.target.y),
					middlepoint,
					getStart(d.target.x, d.target.y, d.source.x, d.source.y)
				]
			
				d.line=line(points);
				d.textPos=[middlepoint[0]+10,middlepoint[1]+10];
			}		
		}

function parametricBisector(startX, startY, endX, endY){
	//segment midpoint
	var centrePointX = (startX + endX)/2;
	var centrePointY = (startY + endY)/2;
	//perpendicular slope. Slope is infinity for an horizontal line	
	var perpendicularSlope =  - (endX - startX)/(endY - startY);
	var yIntersect = centrePointY - (centrePointX * perpendicularSlope);
	//get a unit vector so that parameter has unitary steps
	var norm=Math.sqrt(centrePointX*centrePointX+(yIntersect-centrePointY)*(yIntersect-centrePointY));
	//returns the parametric bisector as a parametric equation
	
	var pb=function(t){
		if(startY!=endY){			
			var x =centrePointX + ((0 - centrePointX)/norm) * t;
			var y =centrePointY + ((yIntersect-centrePointY)/norm) * t;
		}
		else{
			var x = centrePointX ;
			var y = centrePointY + t;
		}
		return [x,y];
	}
	return pb;
}

function getStart(x1, y1, x2, y2){
			phi = Math.atan2(y2-y1, x2-x1)
			x = x1 + circle_radius * Math.cos(phi);
			y = y1 + circle_radius * Math.sin(phi);
			return [x,y];
		}
	return _public;

});
