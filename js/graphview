define(["d3", "model"], function(d3, model){


	var circle_radius=13;

	var svg,
	dragLine,
	drag_linking=false,
	link_target=null,
	_public={};

	_public.init=function(){
		svg = d3.select("svg")
		.on("click", function(){
			if(model.edit_locked)return;
			var point = d3.mouse(this);
			var newNode=model.createNode(point[0], point[1]);
			select(newNode);
		});


		svg.append('svg:defs').append('svg:marker')
    .attr('id', 'end-arrow')
    .attr('viewBox', '0 -5 10 10')
    .attr('refX', 6)
    .attr('markerWidth', 3)
    .attr('markerHeight', 3)
    .attr('orient', 'auto')
  .append('svg:path')
    .attr('d', 'M0,-5L10,0L0,5')
    .attr('fill', '#000');

		var width = +svg.attr("width"),
			height = +svg.attr("height")

		dragLine = svg.append('line')
		.classed('dragline hidden', true)
		.attr("x1", 0 )
		.attr("y1", 0 )
		.attr("x2", 100)
		.attr("y2", 100)
	}

	_public.update=function(){
		var link_update = svg.selectAll(".link").data(model.graph.links, function(d){return d.id;});
		var link_exit = link_update.exit();

		link_exit
		.remove();

		var link_enter=link_update.enter()
		.insert("g",":first-child")
			.classed("link", true)
			.attr("id", function(d){return d.id;})
			.on("click", function(d){
				d3.event.stopPropagation();
				select(d);
		});




		

		link_enter.insert("path").classed("visiblelink", true).style('marker-end', 'url(#end-arrow)');
		link_enter.insert("path", ":first-child").classed("clicksurface", true)
		link_enter.insert("text");

		var link_merged = link_update.merge(link_enter);

		link_merged.selectAll("path")
		.attr("d",getLinkLine);

		link_merged
		.selectAll(".visiblelink")
		.style("stroke", function(d){return d.type.color})
		.style("visibility", function(d){ return d.type.visible?"visible":"collapse"})

		link_merged
		.selectAll(".clicksurface")
		.style("visibility", function(d){ return d.type.visible?"hidden":"collapse"})


		//TODO: space text so that it does not overlap line
		//TODO: multiple relationships among the same objects hide each other. The lines should be curve and
		//with different middle point

		link_merged
		.selectAll("text")
			.attr('x', function(d){return d.points[1][0]+10})
			.attr('y', function(d){return d.points[1][1]+10})
			.text(function(d) {
				return d.label;
			})
		.style("visibility", function(d){ return d.type.visible?"visible":"collapse"});


		link_merged
		.style("opacity",function(d){return (d.hidden||d.source.hidden||d.target.hidden)?0.05:1});

		var node_update = svg.selectAll(".node").data(model.graph.nodes, function(d){return d.id;});

		var node_exit = node_update.exit();
		node_exit.remove();

		var node_enter = node_update.enter()
		.append("g")
			.classed("node", true)
			.attr("id", function(d){return d.id;})
		.call(d3.drag()
			.on("start", dragstarted)
			.on("drag", dragged)
			.on("end", dragended))
		.on("click", function(d){
			d3.event.stopPropagation();
			select(d);
		})
		.on("mouseenter", function(d){
			if(drag_linking)link_target=d;
		})
		.on("mouseleave", function(d){
			if(drag_linking)link_target=null;
		});

		node_enter.append("circle")
			.attr("r", circle_radius)

		node_enter.append("text")
		.attr('x', 20)
		.attr('y', 6);

		var node_merged = node_update.merge(node_enter);

		node_merged
			.attr("transform", function(d) {
				return "translate(" + d.x + "," + d.y + ")";
			})
		.selectAll("text")
			.text(function(d) {
				return d.label;
			})
			.style("visibility", function(d){ return d.type.visible?"visible":"collapse"});

		node_merged
			.selectAll("circle")
			.style("fill", function(d){ return d.type.color})
			.style("visibility", function(d){ return d.type.visible?"visible":"collapse"});

		node_merged.style("opacity",function(d){return d.hidden?0.05:1});

	}


	function select(datum){
		d3.selectAll(".visiblelink").classed("selected", false);
		d3.selectAll("circle").classed("selected", false);
		d3.select("#"+datum.id).select(".visiblelink").classed("selected", true);
		d3.select("#"+datum.id).select("circle").classed("selected", true);
		model.selected=datum;
		model.changed();
	}


	function dragstarted(d) {
		if(d3.event.sourceEvent.shiftKey){
			if(model.edit_locked)return;
			drag_linking=true;
			dragLine
			.classed("hidden", false)
			.attr("x1", d.x )
			.attr("y1", d.y )
			.attr("x2", d3.event.x)
			.attr("y2", d3.event.y);
		}
	}

	function dragged(d){
		if(drag_linking){
			if(model.edit_locked)return;
			dragLine
			.attr("x2", d3.event.x)
			.attr("y2", d3.event.y);
		}
		else{
			d.x = d3.event.x;
			d.y = d3.event.y;

			d3.select(this).attr("transform", function(d) {
				return "translate(" + d.x + "," + d.y + ")";
			});

		
		d3.selectAll(".link").filter(function(d1){return (d1.source === d || d1.target === d)}).selectAll("path").attr("d",getLinkLine);

		d3.selectAll(".link")
		.selectAll("text")
		.attr('x', function(d){return d.points[1][0]+10})
		.attr('y', function(d){return d.points[1][1]+10})
		.text(function(d) {
				return d.label;
			});
	}
}


	function dragended(d) {
		if(drag_linking){
			if(model.edit_locked)return;
			drag_linking=false;
			dragLine.classed("hidden", true);
			if(link_target){
				var newlink=model.createLink(d, link_target);
				select(newlink);
			}
		}
	}

	function getStart(x1, y1, x2, y2){
			phi = Math.atan2(y2-y1, x2-x1)
			x = x1 + circle_radius * Math.cos(phi);
			y = y1 + circle_radius * Math.sin(phi);
			return [x,y];
		}

const step=0.005;
		var line =d3.line().curve(d3.curveCardinal);
	function getLinkLine(d){
			var allLinks=model.linksBetween(d.source, d.target).map(l => l.id);

			//makes  0, 1, -1, 2, -2, 3, -3...
			var progression=d3.range(1,allLinks.length).reduce((p,c) => {
				p.push(c);
				p.push(-c);	
				return p;  
			}, [0])

			//now array length is odd
			if(allLinks.length%2==0)allLinks.unshift(-1);
			var t=progression[allLinks.indexOf(d.id)]*step;
			var middlepoint=parametricBisector(d.source.x, d.source.y, d.target.x, d.target.y)(t);
			
			d.points=	[
				getStart(d.source.x, d.source.y, d.target.x, d.target.y),
				middlepoint,
				getStart(d.target.x, d.target.y, d.source.x, d.source.y)
			]
			
			return line(d.points);
		}

function parametricBisector(startX,startY,endX,endY){
	// Calculate slopes and Y intersects
	var perpendicularSlope =  - (endX - startX)/(endY - startY);
	var centrePointX = (startX + endX)/2;
	var centrePointY = (startY + endY)/2;

	var yIntersect = centrePointY - (centrePointX * perpendicularSlope);


	return function(t){
		var x =centrePointX + (0 - centrePointX) * t;
		var y =centrePointY + (yIntersect-centrePointY) * t;
		return [x,y];
	}
}


	return _public;

});
